# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "test.baml": "class CardFraudDetectionResponse {\n    reasons string[] @description(#\"\n        The reasons for the categorization. This is a list of strings that describe the reasons for the categorization.\n    \"#)\n    categorization CardTransactionCategorization @description(#\"\n        The categorization of the transaction. This is a string that describes the categorization of the transaction.\n    \"#)\n}\n\nclass CardTransaction {\n    id string\n    amount float\n    timestamp string\n    user_id string\n    card_number string\n    card_type string\n    card_issuer string\n    merchant_name string\n    location string\n    status CardTransactionStatus\n}\n\nenum CardTransactionStatus {\n    Pending\n    Approved\n    Declined\n    Failed\n}\n\nenum CardTransactionCategorization {\n  Fraud\n  Normal\n  Unknown\n}\n\nfunction CategorizeCardTransaction(transaction: CardTransaction, prevTransactionContext: CardTransaction[]) -> CardFraudDetectionResponse {\n    client \"openai/gpt-4.1\"\n    prompt #\"\n    You are a fraud detection system. Analyze the provided transaction, as well as the previous transaction context, and classify it as one of three categories:\n    **Fraud** - Strong indicators of fraudulent activity\n    **Normal** - Appears to be legitimate transaction  \n    **Unknown** - Insufficient information or mixed signals\n\n    Consider factors like:\n    - Transaction amount vs. typical spending patterns\n    - Location/time anomalies\n    - Merchant type consistency\n    - Velocity of transactions\n    - Account behavior patterns\n\n    Return only the category name. If multiple factors conflict or data is incomplete, choose \"Unknown\" rather than guessing.\n    \n    Transaction data\n    ---\n    {{ transaction }}\n    ---\n    {{ prevTransactionContext }}\n    ---\n    {{ ctx.output_format }}\n    \"#\n\n}\n\ntest SampleTest {\n    functions [CategorizeCardTransaction]\n    args {\n        transaction {\n                id \"3\"\n                amount 1989.73\n                timestamp \"2021-01-01\"\n                user_id \"1\"\n                card_number \"1234567890\"\n                card_type \"Visa\"\n                card_issuer \"Bank of America\"\n                merchant_name \"Amazon\"\n                location \"New York\"\n                status \"Approved\"\n            }\n\n        prevTransactionContext [\n            {\n                id \"1\"\n                amount 104.99\n                timestamp \"2021-01-01\"\n                user_id \"1\"\n                card_number \"1234567890\"\n                card_type \"Visa\"\n                card_issuer \"Bank of America\"\n                merchant_name \"Amazon\"\n                location \"New York\"\n                status \"Approved\"\n            }\n            {\n                id \"2\"\n                amount 104.99\n                timestamp \"2021-01-01\"\n                user_id \"1\"\n                card_number \"1234567890\"\n                card_type \"Visa\"\n                card_issuer \"Bank of America\"\n                merchant_name \"Amazon\"\n                location \"New York\"\n                status \"Approved\"\n            }\n        ]\n    }\n    @@assert({{ this.categorization == \"Fraud\" or this.categorization == \"Normal\" or this.categorization == \"Unknown\" }})\n}\n",
}

def get_baml_files():
    return _file_map